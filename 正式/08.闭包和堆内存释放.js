// js 中内存分为堆内存和栈内存
// 堆内存； 存储引用数据类型的值  对象 键值对 函数 代码字符串
// 堆内存释放：让引用堆内存地址变量赋值为 null 即可

// 栈内存：提供js 代码执行的环境和存储的基本类型值
// 栈内存释放：当函数执行完成，所形成的私有作用域会自动释放
// 特殊情况：函数执行完成，当前形成的栈内存中，某些内存被栈内存以为外的变量占用了，
// 全局栈内存只有在页面关闭的时候才会释放掉。能够一直保存下来

var i = 1;

function fn(i) {
    var i = 2; // 私有变量 
    return function (n) {
        console.log(n + (++i));
    }
}
var f = fn(2); // 先把fn执行传递实参2，把fn执行的返回结果赋值给 小f；
f(3); // 6
fn(5)(6);  //9 // 和上面俩步类似，都先把fn执行，把fn执行的返回结果再执行，
fn(7)(8); // 11
f(4); //8

// i++ 自身累加1，先用原有值再 原有本身的值再累加
// ++i;自身累加1，把累加后的结果进行计算

var k = 1; // 2 3 2 3 2 3
console.log(5 + (++k) + (k++) + 4 + (k--) + (++k) + 3 + (--k) + (k++), k);
 // 7 9 13  16 19 21  23 26 3
 // 26 3




//  函数执行形成一个私有作用域，保护里面的私有变量不收外界干扰，这种保护机制称为 『闭包』
// 为了保证js性能，堆栈内存性能优化，尽可能减少对闭包的使用。